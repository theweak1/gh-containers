name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    #NOTE: To put a job and its steps into a container (run on a container) do the following
    container: node:16

    #NOTE: In case that the container requires some values to be passed to its for setup and that are nor require to execute the jobs do the following

    # container:
    #   image: node:16
    #     env:

    env:
      #NOTE: Since the job requires the Address of the cluster, and we are using a service for the MongoDB we can set the address of the cluster as follows (using the name of the label from the service)

      #WARN: This only works if job is running in a container

      MONGODB_CONNECTION_PROTOCOL: mongodb
      MONGODB_CLUSTER_ADDRESS: mongodb
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      PORT: 8080

      #NOTE: A Service containers are Docker containers that provide a simple and portable way for you to host services that you might need to test or operate your application in a workflow. More info on service containtes here: https://docs.github.com/en/actions/using-containerized-services/about-service-containers
      # To use a service containter do the following.
    services:
      # First would be the service(s) label
      mongodb:
        # next would be the image container, due that services only runs on container images
        image: mongo
        # depending on the image, next would be the env required for configuration
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example

    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
